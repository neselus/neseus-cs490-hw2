{
  "version": 3,
  "sources": ["../../src/lib/auth.js"],
  "sourcesContent": ["import { AuthenticationError, ForbiddenError } from '@redwoodjs/graphql-server'\nimport { db } from './db'\n\nexport const getCurrentUser = async (session) => {\n  return await db.user.findUnique({\n    where: { id: session.id },\n    select: { id: true, email: true},\n  })\n}\nexport const isAuthenticated = () => {\n  return !!context.currentUser\n}\n\nexport const hasRole = (roles) => {\n  if (!isAuthenticated()) {\n    return false\n  }\n\n  const currentUserRoles = context.currentUser?.roles\n\n  if (typeof roles === 'string') {\n    if (typeof currentUserRoles === 'string') {\n      // roles to check is a string, currentUser.roles is a string\n      return currentUserRoles === roles\n    } else if (Array.isArray(currentUserRoles)) {\n      // roles to check is a string, currentUser.roles is an array\n      return currentUserRoles?.some((allowedRole) => roles === allowedRole)\n    }\n  }\n\n  if (Array.isArray(roles)) {\n    if (Array.isArray(currentUserRoles)) {\n      // roles to check is an array, currentUser.roles is an array\n      return currentUserRoles?.some((allowedRole) =>\n        roles.includes(allowedRole)\n      )\n    } else if (typeof currentUserRoles === 'string') {\n      // roles to check is an array, currentUser.roles is a string\n      return roles.some((allowedRole) => currentUserRoles === allowedRole)\n    }\n  }\n\n  // roles not found\n  return false\n}\n\nexport const requireAuth = ({ roles } = {}) => {\n  if (!isAuthenticated()) {\n    throw new AuthenticationError(\"You don't have permission to do that.\")\n  }\n\n  if (roles && !hasRole(roles)) {\n    throw new ForbiddenError(\"You don't have access to do that.\")\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,4BAAoD;AACpD,gBAAW;AAEJ,MAAMA,iBAAiB,OAAOC,YAAY;AAC/C,SAAO,MAAMC,aAAGC,KAAKC,WAAW;IAC9BC,OAAO;MAAEC,IAAIL,QAAQK;IAAG;IACxBC,QAAQ;MAAED,IAAI;MAAME,OAAO;IAAI;EACjC,CAAC;AACH;AACO,MAAMC,kBAAkBA,MAAM;AACnC,SAAO,CAAC,CAACC,8BAAQC;AACnB;AAEO,MAAMC,UAAWC,WAAU;AAChC,MAAI,CAACJ,gBAAgB,GAAG;AACtB,WAAO;EACT;AAEA,QAAMK,mBAAmBJ,8BAAQC,aAAaE;AAE9C,MAAI,OAAOA,UAAU,UAAU;AAC7B,QAAI,OAAOC,qBAAqB,UAAU;AAExC,aAAOA,qBAAqBD;IAC9B,eAAWE,gBAAAA,SAAcD,gBAAgB,GAAG;AAE1C,aAAOA,kBAAkBE,KAAMC,iBAAgBJ,UAAUI,WAAW;IACtE;EACF;AAEA,UAAIF,gBAAAA,SAAcF,KAAK,GAAG;AACxB,YAAIE,gBAAAA,SAAcD,gBAAgB,GAAG;AAEnC,aAAOA,kBAAkBE,KAAMC,qBAC7BC,gBAAAA,SAAAL,KAAK,EAAAM,KAALN,OAAeI,WAAW,CAC5B;IACF,WAAW,OAAOH,qBAAqB,UAAU;AAE/C,iBAAOM,YAAAA,SAAAP,KAAK,EAAAM,KAALN,OAAYI,iBAAgBH,qBAAqBG,WAAW;IACrE;EACF;AAGA,SAAO;AACT;AAEO,MAAMI,cAAcA,CAAC;EAAER;AAAM,IAAI,CAAC,MAAM;AAC7C,MAAI,CAACJ,gBAAgB,GAAG;AACtB,UAAM,IAAIa,0CAAoB,uCAAuC;EACvE;AAEA,MAAIT,SAAS,CAACD,QAAQC,KAAK,GAAG;AAC5B,UAAM,IAAIU,qCAAe,mCAAmC;EAC9D;AACF;",
  "names": ["getCurrentUser", "session", "db", "user", "findUnique", "where", "id", "select", "email", "isAuthenticated", "context", "currentUser", "hasRole", "roles", "currentUserRoles", "_Array$isArray", "some", "allowedRole", "_includesInstanceProperty", "call", "_someInstanceProperty", "requireAuth", "AuthenticationError", "ForbiddenError"]
}
